// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2022 23:21:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Datatpath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Datatpath_vlg_sample_tst(
	CLK,
	IE,
	Ix,
	OE,
	OP,
	S,
	WA,
	WAA,
	WAAB,
	WE,
	sampler_tx
);
input  CLK;
input  IE;
input [3:0] Ix;
input  OE;
input [2:0] OP;
input [1:0] S;
input [2:0] WA;
input [2:0] WAA;
input [2:0] WAAB;
input  WE;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or IE or Ix or OE or OP or S or WA or WAA or WAAB or WE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Datatpath_vlg_check_tst (
	O,
	sampler_rx
);
input [15:0] O;
input sampler_rx;

reg [15:0] O_expected;

reg [15:0] O_prev;

reg [15:0] O_expected_prev;

reg [15:0] last_O_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	O_prev = O;
end

// update expected /o prevs

always @(trigger)
begin
	O_expected_prev = O_expected;
end


// expected O[ 15 ]
initial
begin
	O_expected[15] = 1'bX;
end 
// expected O[ 14 ]
initial
begin
	O_expected[14] = 1'bX;
end 
// expected O[ 13 ]
initial
begin
	O_expected[13] = 1'bX;
end 
// expected O[ 12 ]
initial
begin
	O_expected[12] = 1'bX;
end 
// expected O[ 11 ]
initial
begin
	O_expected[11] = 1'bX;
end 
// expected O[ 10 ]
initial
begin
	O_expected[10] = 1'bX;
end 
// expected O[ 9 ]
initial
begin
	O_expected[9] = 1'bX;
end 
// expected O[ 8 ]
initial
begin
	O_expected[8] = 1'bX;
end 
// expected O[ 7 ]
initial
begin
	O_expected[7] = 1'bX;
end 
// expected O[ 6 ]
initial
begin
	O_expected[6] = 1'bX;
end 
// expected O[ 5 ]
initial
begin
	O_expected[5] = 1'bX;
end 
// expected O[ 4 ]
initial
begin
	O_expected[4] = 1'bX;
end 
// expected O[ 3 ]
initial
begin
	O_expected[3] = 1'bX;
end 
// expected O[ 2 ]
initial
begin
	O_expected[2] = 1'bX;
end 
// expected O[ 1 ]
initial
begin
	O_expected[1] = 1'bX;
end 
// expected O[ 0 ]
initial
begin
	O_expected[0] = 1'bX;
end 
// generate trigger
always @(O_expected or O)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected O = %b | ",O_expected_prev);
	$display("| real O = %b | ",O_prev);
`endif
	if (
		( O_expected_prev[0] !== 1'bx ) && ( O_prev[0] !== O_expected_prev[0] )
		&& ((O_expected_prev[0] !== last_O_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[0] = O_expected_prev[0];
	end
	if (
		( O_expected_prev[1] !== 1'bx ) && ( O_prev[1] !== O_expected_prev[1] )
		&& ((O_expected_prev[1] !== last_O_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[1] = O_expected_prev[1];
	end
	if (
		( O_expected_prev[2] !== 1'bx ) && ( O_prev[2] !== O_expected_prev[2] )
		&& ((O_expected_prev[2] !== last_O_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[2] = O_expected_prev[2];
	end
	if (
		( O_expected_prev[3] !== 1'bx ) && ( O_prev[3] !== O_expected_prev[3] )
		&& ((O_expected_prev[3] !== last_O_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[3] = O_expected_prev[3];
	end
	if (
		( O_expected_prev[4] !== 1'bx ) && ( O_prev[4] !== O_expected_prev[4] )
		&& ((O_expected_prev[4] !== last_O_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[4] = O_expected_prev[4];
	end
	if (
		( O_expected_prev[5] !== 1'bx ) && ( O_prev[5] !== O_expected_prev[5] )
		&& ((O_expected_prev[5] !== last_O_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[5] = O_expected_prev[5];
	end
	if (
		( O_expected_prev[6] !== 1'bx ) && ( O_prev[6] !== O_expected_prev[6] )
		&& ((O_expected_prev[6] !== last_O_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[6] = O_expected_prev[6];
	end
	if (
		( O_expected_prev[7] !== 1'bx ) && ( O_prev[7] !== O_expected_prev[7] )
		&& ((O_expected_prev[7] !== last_O_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[7] = O_expected_prev[7];
	end
	if (
		( O_expected_prev[8] !== 1'bx ) && ( O_prev[8] !== O_expected_prev[8] )
		&& ((O_expected_prev[8] !== last_O_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[8] = O_expected_prev[8];
	end
	if (
		( O_expected_prev[9] !== 1'bx ) && ( O_prev[9] !== O_expected_prev[9] )
		&& ((O_expected_prev[9] !== last_O_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[9] = O_expected_prev[9];
	end
	if (
		( O_expected_prev[10] !== 1'bx ) && ( O_prev[10] !== O_expected_prev[10] )
		&& ((O_expected_prev[10] !== last_O_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[10] = O_expected_prev[10];
	end
	if (
		( O_expected_prev[11] !== 1'bx ) && ( O_prev[11] !== O_expected_prev[11] )
		&& ((O_expected_prev[11] !== last_O_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[11] = O_expected_prev[11];
	end
	if (
		( O_expected_prev[12] !== 1'bx ) && ( O_prev[12] !== O_expected_prev[12] )
		&& ((O_expected_prev[12] !== last_O_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[12] = O_expected_prev[12];
	end
	if (
		( O_expected_prev[13] !== 1'bx ) && ( O_prev[13] !== O_expected_prev[13] )
		&& ((O_expected_prev[13] !== last_O_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[13] = O_expected_prev[13];
	end
	if (
		( O_expected_prev[14] !== 1'bx ) && ( O_prev[14] !== O_expected_prev[14] )
		&& ((O_expected_prev[14] !== last_O_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[14] = O_expected_prev[14];
	end
	if (
		( O_expected_prev[15] !== 1'bx ) && ( O_prev[15] !== O_expected_prev[15] )
		&& ((O_expected_prev[15] !== last_O_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O_exp[15] = O_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Datatpath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg IE;
reg [3:0] Ix;
reg OE;
reg [2:0] OP;
reg [1:0] S;
reg [2:0] WA;
reg [2:0] WAA;
reg [2:0] WAAB;
reg WE;
// wires                                               
wire [15:0] O;

wire sampler;                             

// assign statements (if any)                          
Datatpath i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.IE(IE),
	.Ix(Ix),
	.O(O),
	.OE(OE),
	.OP(OP),
	.S(S),
	.WA(WA),
	.WAA(WAA),
	.WAAB(WAAB),
	.WE(WE)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 
// Ix[ 3 ]
initial
begin
	Ix[3] = 1'b0;
	Ix[3] = #60000 1'b1;
	Ix[3] = #40000 1'b0;
end 
// Ix[ 2 ]
initial
begin
	Ix[2] = 1'b0;
	Ix[2] = #20000 1'b1;
	Ix[2] = #80000 1'b0;
	Ix[2] = #40000 1'b1;
	Ix[2] = #40000 1'b0;
end 
// Ix[ 1 ]
initial
begin
	Ix[1] = 1'b0;
	Ix[1] = #100000 1'b1;
	Ix[1] = #40000 1'b0;
end 
// Ix[ 0 ]
initial
begin
	Ix[0] = 1'b0;
	Ix[0] = #20000 1'b1;
	Ix[0] = #40000 1'b0;
end 

// IE
initial
begin
	IE = 1'b0;
	IE = #20000 1'b1;
	IE = #140000 1'b0;
end 
// WA[ 2 ]
initial
begin
	WA[2] = 1'b0;
	WA[2] = #200000 1'b1;
	WA[2] = #120000 1'b0;
	WA[2] = #160000 1'b1;
	WA[2] = #160000 1'b0;
	WA[2] = #160000 1'b1;
	WA[2] = #160000 1'b0;
end 
// WA[ 1 ]
initial
begin
	WA[1] = 1'b0;
	WA[1] = #80000 1'b1;
	WA[1] = #80000 1'b0;
	WA[1] = #80000 1'b1;
	# 80000;
	repeat(4)
	begin
		WA[1] = 1'b0;
		WA[1] = #80000 1'b1;
		# 80000;
	end
	WA[1] = 1'b0;
end 
// WA[ 0 ]
initial
begin
	repeat(2)
	begin
		WA[0] = 1'b0;
		WA[0] = #40000 1'b1;
		# 40000;
	end
	WA[0] = 1'b0;
	WA[0] = #40000 1'b1;
	# 40000;
	repeat(9)
	begin
		WA[0] = 1'b0;
		WA[0] = #40000 1'b1;
		# 40000;
	end
	WA[0] = 1'b0;
end 

// WE
initial
begin
	WE = 1'b0;
	WE = #20000 1'b1;
end 
// WAA[ 2 ]
initial
begin
	WAA[2] = 1'b0;
end 
// WAA[ 1 ]
initial
begin
	WAA[1] = 1'b0;
end 
// WAA[ 0 ]
initial
begin
	WAA[0] = 1'b0;
end 
// WAAB[ 2 ]
initial
begin
	WAAB[2] = 1'b0;
end 
// WAAB[ 1 ]
initial
begin
	WAAB[1] = 1'b0;
end 
// WAAB[ 0 ]
initial
begin
	WAAB[0] = 1'b0;
end 
// OP[ 2 ]
initial
begin
	OP[2] = 1'b0;
	OP[2] = #180000 1'b1;
	OP[2] = #40000 1'b0;
end 
// OP[ 1 ]
initial
begin
	OP[1] = 1'b0;
end 
// OP[ 0 ]
initial
begin
	OP[0] = 1'b0;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
end 

// OE
initial
begin
	OE = 1'b0;
	OE = #180000 1'b1;
	OE = #40000 1'b0;
end 

Datatpath_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.IE(IE),
	.Ix(Ix),
	.OE(OE),
	.OP(OP),
	.S(S),
	.WA(WA),
	.WAA(WAA),
	.WAAB(WAAB),
	.WE(WE),
	.sampler_tx(sampler)
);

Datatpath_vlg_check_tst tb_out(
	.O(O),
	.sampler_rx(sampler)
);
endmodule

